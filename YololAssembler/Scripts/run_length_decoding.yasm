#import lib.yasm

#define input :a
#define icache a
#define output :o

#define tmp_char b
#define number c
#define last_char d
#define dup_char e
#define is_nonalpha f
#define z_char g

#define is_letter(check) {
    check>9
}

#define is_number(check) {
    check<=9
}

@setup:
    ## input="a10bcd"
    icache="_"+input
    output=""

@start:
    last_char=tmp_char;
    tmp_char=pop_char(icache);
    continue_if(is_letter(tmp_char));
    output=tmp_char+output;

    last_char=tmp_char;
    tmp_char=pop_char(icache);
    continue_if(is_letter(tmp_char));
    output=tmp_char+output;

    goto{start}+eval(exit-start)*(icache<0)

@check:
    goto{parse}+(tmp_char=="_")*eval(exit-parse)

@parse:
    ## Parse digit
    number=5*(tmp_char>4)
    number+=2*(tmp_char>(number+1))
    number+=tmp_char>number+tmp_char>(number+1)

    ## Check if next character is also a digit
    tmp_char=pop_char(icache)
    is_nonalpha=is_number(tmp_char)

    ## Add 10 (if it's a digit) subtract one (for the character we've already copied)
    number+=is_nonalpha*10
    
    z_char=0+last_char

@parse_cont:
    dup_char=is_nonalpha+tmp_char-(1+tmp_char)-0;
    
@dupe:
    dup_char+=number>5+last_char-z_char-1
             +number>4+last_char-z_char-1
             +number>3+last_char-z_char-1
             +number>2+last_char-z_char-1
             +number>1+last_char-z_char-1
    number-=5

    goto{dupe}/(number>0)

@prepend_dupe:
    output=dup_char+output;
    goto{start}/(icache>0)

@exit:
    output-="_"
    goto:done++